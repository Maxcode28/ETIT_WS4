#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/timer.h"
#include "driverlib/interrupt.h"
// Addresse zum ansteuern der jeweiligen LED
volatile uint32_t LED = 1;

//Delay-Funktion für Blinken
void delay(void)
{
  uint32_t i=80000;
  while(i) {i--;}
}

// Interruptroutine

void ex_int_handler(void) {

//Schalte vorherige LED aus

GPIOPinWrite(GPIO_PORTB_BASE, LED, 0x00);

// Interrupt-Flag löschen

GPIOIntClear(GPIO_PORTF_BASE, GPIO_PIN_4);

GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE,GPIO_PIN_4);

LED = LED<<1;
// Von 8. LED zurück auf 1. springen
if ( LED >= 1<<8)
{
LED = 1;
}
}

void main (void){
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);                // GPIO Port B aktivieren
    GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_0);         // GPIO Port B Pin 0-7 aktivieren
    GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_1);
    GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_2);
    GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_3);
    GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_4);
    GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_5);
    GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_6);
    GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_7);

    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);                // Port F Aktivieren
    GPIOPinTypeGPIOInput(GPIO_PORTF_BASE,GPIO_PIN_4);           // PF4 als Input definieren
    GPIOPadConfigSet(GPIO_PORTF_BASE,GPIO_PIN_4,GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_STD_WPU);

    // Pin mit Interrupt
    GPIOIntDisable(GPIO_PORTF_BASE,GPIO_PIN_4);
    GPIOIntClear(GPIO_PORTF_BASE, GPIO_PIN_4);
    GPIOIntTypeSet(GPIO_PORTF_BASE, GPIO_PIN_4, GPIO_FALLING_EDGE);
    GPIOIntRegister(GPIO_PORTF_BASE, ex_int_handler);
    GPIOIntEnable(GPIO_PORTF_BASE,GPIO_PIN_4);

while(1) {
    delay();
    GPIOPinWrite(GPIO_PORTB_BASE, LED, 0xFF);
    delay();
    GPIOPinWrite(GPIO_PORTB_BASE, LED, 0x00);


}

}
